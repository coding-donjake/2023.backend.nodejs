// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// global models & enums

model Admin {
  id     String      @id @default(uuid())
  role   AdminRole
  status AdminStatus @default(ok)
  User   User?       @relation(fields: [userId], references: [id])
  userId String      @unique
}

model Log {
  id       String   @id @default(uuid())
  datetime DateTime @default(now())
  type     String   @db.VarChar(20)
  content  Json     @db.Json
  User     User?    @relation(fields: [userId], references: [id])
  userId   String   @unique
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique @db.VarChar(50)
  password        String           @db.VarChar(255)
  status          UserStatus       @default(unverified)
  UserInformation UserInformation?
  Admin           Admin?
  Log             Log?
  // assets management system
  Borrowing       Borrowing[]
  // events management system
  Customer        Customer?
}

model UserInformation {
  id         String   @id @default(uuid())
  lastname   String   @db.VarChar(255)
  firstname  String   @db.VarChar(255)
  middlename String   @db.VarChar(255)
  suffix     String   @db.VarChar(20)
  gender     Gender
  birthdate  DateTime @db.Date
  User       User?    @relation(fields: [userId], references: [id])
  userId     String   @unique
}

enum AdminRole {
  admin
  staff
}

enum AdminStatus {
  ok
  removed
}

enum Gender {
  male
  female
}

enum UserStatus {
  unverified
  ok
  deactivated
  removed
  suspended
}

// assets management system

model Asset {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(255)
  brand     String      @db.VarChar(255)
  type      String      @db.VarChar(255)
  status    AssetStatus
  Borrowing Borrowing[]
}

model Borrowing {
  id               String          @id @default(uuid())
  datetimeBorrowed DateTime
  datetimeReturned DateTime
  remarksBorrowed  String          @db.Text
  remarksReturned  String          @db.Text
  status           BorrowingStatus
  Asset            Asset?          @relation(fields: [assetId], references: [id])
  assetId          String?
  User             User?           @relation(fields: [userId], references: [id])
  userId           String?
}

enum AssetStatus {
  good
  broken
}

enum BorrowingStatus {
  pending
  borrowed
  returned
}

// events management system

model Customer {
  id      String         @id @default(uuid())
  address String         @db.Text
  phone   String         @db.VarChar(20)
  email   String         @db.VarChar(255)
  status  CustomerStatus
  User    User?          @relation(fields: [userId], references: [id])
  userId  String         @unique
  Event   Event?         @relation(fields: [eventId], references: [id])
  eventId String?
}

model Event {
  id            String        @id @default(uuid())
  datetimeStart DateTime
  datetimeEnd   DateTime
  type          String        @db.VarChar(20)
  name          String        @db.VarChar(255)
  address       String        @db.Text
  status        EventStatus
  Customer      Customer[]
  EventSupply   EventSupply[]
}

model EventSupply {
  id       String            @id @default(uuid())
  quantity Int
  status   EventSupplyStatus
  Event    Event?            @relation(fields: [eventId], references: [id])
  eventId  String?
  Supply   Supply?           @relation(fields: [supplyId], references: [id])
  supplyId String?
}

model Order {
  id              String        @id @default(uuid())
  datetimeOrdered DateTime
  datetimeArrived DateTime
  status          OrderStatus
  OrderSupply     OrderSupply[]
  Supplier        Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId      String?
}

model OrderSupply {
  id       String            @id @default(uuid())
  quantity Int
  status   OrderSupplyStatus
  Order    Order?            @relation(fields: [orderId], references: [id])
  orderId  String?
  Supply   Supply?           @relation(fields: [supplyId], references: [id])
  supplyId String?
}

model Supplier {
  id      String         @id @default(uuid())
  name    String         @db.VarChar(255)
  address String         @db.Text
  phone   String         @db.VarChar(20)
  email   String         @db.VarChar(255)
  status  SupplierStatus
  Order   Order[]
}

model Supply {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  brand       String        @db.VarChar(255)
  type        String        @db.VarChar(255)
  stock       Int
  status      SupplyStatus
  EventSupply EventSupply[]
  OrderSupply OrderSupply[]
}

model Task {
  id     String     @id @default(uuid())
  name   String     @db.VarChar(255)
  status TaskStatus
}

enum CustomerStatus {
  ok
  flagged
  removed
}

enum EventStatus {
  active
  cancelled
  completed
  removed
  unpaid
}

enum EventSupplyStatus {
  ok
  removed
}

enum OrderStatus {
  active
  arrived
  cancelled
  removed
}

enum OrderSupplyStatus {
  ok
  removed
}

enum SupplierStatus {
  ok
  flagged
  removed
}

enum SupplyStatus {
  ok
  removed
}

enum TaskStatus {
  active
  completed
  onhold
  removed
}
